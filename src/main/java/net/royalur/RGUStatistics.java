package net.royalur;

import net.royalur.agent.Agent;
import net.royalur.agent.LikelihoodAgent;
import net.royalur.agent.utility.PiecesAdvancedUtilityFn;
import net.royalur.model.PlayerState;
import net.royalur.model.dice.DiceType;
import net.royalur.model.dice.Roll;
import net.royalur.model.path.MurrayPathPair;
import net.royalur.model.path.SkiriukPathPair;
import net.royalur.rules.RuleSet;
import net.royalur.rules.standard.StandardPiece;
import net.royalur.rules.standard.StandardRuleSet;
import net.royalur.stats.GameStats;
import net.royalur.stats.GameStatsSummary;
import net.royalur.stats.GameStatsTarget;
import net.royalur.stats.SummaryStat;

import javax.annotation.Nonnull;
import java.util.List;
import java.util.function.Function;
import java.util.function.Supplier;

/**
 * This file intends to hold tests that can be performed
 * to different sets of game rules and paths to compare them.
 */
public class RGUStatistics {

    /**
     * Instantiate to run statistics about the paths available for the Royal Game of Ur.
     */
    public RGUStatistics() {}

    /**
     * Generates statistics for a single game generated by {@code gameGenerator},
     * and played by two AI agents.
     * @param gameGenerator A generator to produce a new game for the agents to play.
     * @param lightAgentGenerator A generator to produce the light agent to play the game.
     * @param darkAgentGenerator A generator to produce the dark agent to play the game.
     * @return Statistics about the game that was played between two random agents.
     */
    private @Nonnull GameStats testAgentActions(
            @Nonnull Supplier<Game<StandardPiece, PlayerState, Roll>> gameGenerator,
            @Nonnull Function<
                    StandardRuleSet<StandardPiece, PlayerState, Roll>,
                    Agent<StandardPiece, PlayerState, Roll>
            > lightAgentGenerator,
            @Nonnull Function<
                    StandardRuleSet<StandardPiece, PlayerState, Roll>,
                    Agent<StandardPiece, PlayerState, Roll>
            > darkAgentGenerator
    ) {

        Game<StandardPiece, PlayerState, Roll> game = gameGenerator.get();
        RuleSet<StandardPiece, PlayerState, Roll> rules = game.getRules();
        if (!(rules instanceof StandardRuleSet<StandardPiece, PlayerState, Roll> standardRules))
            throw new IllegalArgumentException("Game does not use standard rules");

        Agent<StandardPiece, PlayerState, Roll> light = lightAgentGenerator.apply(standardRules);
        Agent<StandardPiece, PlayerState, Roll> dark = darkAgentGenerator.apply(standardRules);
        Agent.playAutonomously(game, light, dark);
        return GameStats.gather(game);
    }

    /**
     * Runs tests using AI agents with many game settings.
     * @param agent1Generator The generator of one of the agents to play in each game.
     * @param agent2Generator The generator of one of the agents to play in each game.
     * @param tests The number of tests to run for each game setting.
     */
    public void testAgentActions(
            @Nonnull Function<
                    StandardRuleSet<StandardPiece, PlayerState, Roll>,
                    Agent<StandardPiece, PlayerState, Roll>
            > agent1Generator,
            @Nonnull Function<
                    StandardRuleSet<StandardPiece, PlayerState, Roll>,
                    Agent<StandardPiece, PlayerState, Roll>
            > agent2Generator,
            int tests
    ) {
        List<Supplier<Game<StandardPiece, PlayerState, Roll>>> generators = List.of(
                () -> Game.builder().finkel().build(),
                () -> Game.builder().finkel().safeRosettes(false).build(),
                () -> Game.builder().finkel().rosettesGrantExtraRolls(false).build(),
                () -> Game.builder().finkel().capturesGrantExtraRolls(true).build(),

                // Blitz
                () -> Game.builder()
                        .masters()
                        .startingPieceCount(5)
                        .safeRosettes(false)
                        .capturesGrantExtraRolls(true)
                        .build(),
                () -> Game.builder()
                        .finkel()
                        .startingPieceCount(5)
                        .safeRosettes(false)
                        .capturesGrantExtraRolls(true)
                        .build(),

                () -> Game.builder().masters().build(),
                () -> Game.builder().masters().capturesGrantExtraRolls(true).build(),
                () -> Game.builder().finkel().paths(new SkiriukPathPair()).build(),
                () -> Game.builder().finkel().paths(new MurrayPathPair()).build(),
                () -> Game.builder().aseb().build(),
                () -> Game.builder().finkel().dice(DiceType.THREE_BINARY_0MAX).build()
        );
        for (Supplier<Game<StandardPiece, PlayerState, Roll>> gameGenerator : generators) {
            Game<StandardPiece, PlayerState, Roll> sample = gameGenerator.get();
            String desc = sample.getBoard().getShape().getName().getTextName()
                    + ", " + sample.getRules().getPaths().getName().getTextName()
                    + ", " + sample.getRules().getPlayerStateProvider().getStartingPieceCount() + " pieces"
                    + ", " + sample.getRules().getDiceFactory().getName().getTextName()
                    + ", " + (sample.getRules().areRosettesSafe() ? "safe" : "unsafe")
                    + ", " + (sample.getRules().doRosettesGrantExtraRolls() ? "rosettes+" : "rosettes-")
                    + ", " + (sample.getRules().doCapturesGrantExtraRolls() ? "captures+" : "captures-");

            GameStats[] stats = new GameStats[tests];
            int agent1Wins = 0;
            int agent2Wins = 0;
            long start = System.nanoTime();
            for (int test = 0; test < tests; ++test) {
                boolean swap = (test % 2 == 0);
                GameStats gameStats = testAgentActions(
                        gameGenerator,
                        (swap ? agent2Generator : agent1Generator),
                        (swap ? agent1Generator : agent2Generator)
                );
                stats[test] = gameStats;
                if ((!swap && gameStats.didLightWin()) || (swap && !gameStats.didLightWin())) {
                    agent1Wins += 1;
                } else {
                    agent2Wins += 1;
                }
            }
            long nanosPerTest = (System.nanoTime() - start) / tests;
            double msPerTest = (double) nanosPerTest / 1_000_000.0;
            String timings = String.format(" (%.2f ms/game)", msPerTest);
            GameStatsSummary summary = GameStats.summarise(stats);

            System.out.println(desc + timings + ":");
            for (GameStatsTarget target : GameStatsTarget.values()) {
                double movesMean = summary.getMovesStatistic(target, SummaryStat.MEAN);
                double movesStd = summary.getMovesStatistic(target, SummaryStat.STD_DEV);
                double rollsMean = summary.getRollsStatistic(target, SummaryStat.MEAN);
                double rollsStd = summary.getRollsStatistic(target, SummaryStat.STD_DEV);
                System.out.printf(
                        "%-15s%-19s%-19s%n",
                        target.getName() + ":",
                        ((int) movesMean) + " moves ± " + ((int) movesStd) + ",",
                        ((int) rollsMean) + " rolls ± " + ((int) rollsStd)
                );
            }
            double agent1WinPercentage = 100.0 * ((double) agent1Wins / tests);
            double agent2WinPercentage = 100.0 * ((double) agent2Wins / tests);
            System.out.printf("Agent 1 won %.1f%% of games%n", agent1WinPercentage);
            System.out.printf("Agent 2 won %.1f%% of games%n", agent2WinPercentage);
            System.out.println();
        }
    }

    /**
     * The main entrypoint to run statistics about the Royal Game of Ur board shapes and paths.
     * @param args Ignored.
     */
    public static void main(String[] args) {
        new RGUStatistics().testAgentActions(
                rules -> new LikelihoodAgent<>(
                        rules, new PiecesAdvancedUtilityFn(rules), 0.0055f
                ),
                rules -> new LikelihoodAgent<>(
                        rules, new PiecesAdvancedUtilityFn(rules), 0.2f
                ),
                1000
        );
    }
}
